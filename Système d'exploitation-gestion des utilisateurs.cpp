 //Gestion des utilisateurs//

                    // Bibliothèques principales//
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<unistd.h>



// création d'une structure utilisateur//
typedef struct
{
    char IDutilisateur[20];
    char MDPutilisateur[20];

}utilisateur;



//fonction d'ajout d'utilisateur//
void ajouter_utilisateur(utilisateur U[40],char ID[20],char mdp[20],int n)
{
strcpy(U[n].IDutilisateur,ID);
strcpy(U[n].MDPutilisateur,mdp);
}


// fonction indice d'utilisateur//
int indice(char id[20],utilisateur U[40], int N)
{
int i;
for ( i = 0; i <= N; i++)
{
    if (strcmp(id,U[i].IDutilisateur)==0)
    {
        return i;
    }    
}
}

//fonction login utilisateur//
int login_utilisateur(int n,utilisateur U[50],char id[20],char pw [20])
{
    int i;
    for ( i = 0; i <= n; i++)
    {
        if (strcmp(id,U[i].IDutilisateur)==0 && strcmp(pw,U[i].MDPutilisateur)==0)
        {
            return 1;
        }
       
    }
return 0;
}


//fonction d'affichage de la liste des utilisateurs//
void liste(utilisateur U[20],int n)
{
int i;
for ( i = 1; i <= n; i++)
{
     printf("\n--> ID d'identifiant %d : %s\n",i,U[i].IDutilisateur);
}
}






//Fonction principale//
int main(int argc, char const *argv[])
{

//l'administrateur://
char mdp_adm[20] ,id_adm[20] ,IDutilisateur[20]  , MDPutilisateur[20] , id[20];

int m, choix , i , j , n , N=1 , r=1 , t=0 ,a=0 , rep=4,C,O=0 ;

utilisateur Ut[20];



//inscrire l'admin dans un premier temps://
 printf("                           Application de GESTION DES UTILISATEURS (SE) : \n\n\n");
  printf("------------------------------------------ SESSION DE CONNEXION ET INSCRIPTION ADMINISTRATEUR ----------------------------");
printf("\nEntrer vos infos pour vous inscrire en tant qu'admin :  \n");
fflush(stdin);
printf("--> Entrer votre identifiant :  ");
gets(id_adm);
fflush(stdin);
printf("--> Entrer votre mot de passe:  ");
gets(mdp_adm);
printf("\n\t****OPERATION EFFECTUEE AVEC SUCCES !****");
//la redirection vers une session externe au cas de voeux de connexion//
   strcpy(Ut[0].IDutilisateur,id_adm);
   strcpy(Ut[0].MDPutilisateur,mdp_adm);
   
   
   while (r==1)
   {
   if (a==1)
   {    system("cls");
      printf(" Entrer 1 si vous etes admin de session , 0 si vous etes un utilisateur  :");
      scanf("%d",&rep);
   }
 
   
if (rep==1)
{
      system("cls");
    printf("\n\t^^^^^^^^^^^^  Connexion ADMINISTRATEUR ^^^^^^^^^^^^^");
    fflush(stdin);
    printf("\n ---  Identifiant     : ");
    gets(id_adm);
    fflush(stdin);
    printf("---  Mot de passe  : ");
    gets(mdp_adm);
    C = login_utilisateur(N,Ut,id_adm,mdp_adm);
    if (C==1)
    {
system("cls");  
   printf(".");
   sleep(1);
   printf(".");
   sleep(1);
   printf(".");
   sleep(2);
     printf("\n\t Bienvenue ! Session ouverte avec succes !!!~ ");
 }
 else
 {
       system("cls");
printf("\n!!! Vous n'etes pas inscrit comme ADMIN!");
 }

}

    if ( a==0 || C == 1)
   {
     system("cls");
do   // le menu complet de l'administrateur//
{
    printf("\n\n------------------------------------------------- MENU ADMINISTRATEUR --------------------------------------------:\n");
    printf("\n 1_ Ajouter un utilisateur:             ");
    printf("\n   2_Modifier un mot de passe :          ");
    printf("\n   3_Afficher la liste des utilisateurs: ");  
    printf("\n   4_Supprimer un utilisateur :          ");
    printf("\n   0_Se deconnecter de la session admin / Se connecter a un compte ADMIN/ UTILISATEUR deja existant :                    ");
    printf("\n\t_Votre choix : ");
    scanf(" %d",&choix);
   
     
switch (choix)
{


case 1:{
  system("cls");
int z=0;
    fflush(stdin);
    printf("-Donner l'identifiant d'utilisateur  %d        :",N);
    gets(IDutilisateur);
    fflush(stdin);
    printf("-Donner le mot de passe d'utilisateur %d       :",N);
    gets(MDPutilisateur);
    for ( i = 0; i <= N; i++)
    {
      if (strcmp(IDutilisateur,Ut[i].IDutilisateur) == 0)
      {
        z=1;
      }
    }
    if (z==1)
     
    {  
system("cls");
printf("Redirection");
printf(".");
   sleep(1);
   printf(".");
   sleep(1);
   printf(".");
   sleep(2);
        printf("\n !!! Cet identifiant existe deja !!!");
    }
   
   
   
else
{    
system("cls");
    ajouter_utilisateur(Ut,IDutilisateur,MDPutilisateur,N);
    printf("Ajout en cours");
    printf(".");
   sleep(1);
   printf(".");
   sleep(1);
   printf(".");
   sleep(2);
    printf("\n %s est desormais inscrit! ",IDutilisateur);
    N++;
    O=1;
}
} break;
case 2:{
 system("cls");
    int x,P,t=0;
if (O==0)

{ printf("Recherche en cours");
 printf(".");
   sleep(1);
   printf(".");
   sleep(1);
   printf(".");
   sleep(2);
system("cls");
    printf("\n!!PAS D'UTILISATEUR EXISTANT!!");
}
else
{
  system("cls");
    fflush(stdin);
    printf("Redirection");
    printf(".");
    sleep(1);
    printf(".");
    sleep(1);
    printf(".");
    sleep(2);
system("cls");
    printf("\n_ Entrer l'identifiant que vous voulez modifier :");
    gets(id);
   for ( i = 0; i <= N; i++)
    {
      if (strcmp(id,Ut[i].IDutilisateur) == 0)
      {

        P=indice(id,Ut,n);
        fflush(stdin);
        printf("Lancement du processus de recuperation");
        printf(".");
     sleep(1);
     printf(".");
     sleep(1);
     printf(".");
     sleep(2);
system("cls");
        printf("\n-- Entrer un nouveau mot de passe:");
        gets(Ut[P].MDPutilisateur);
        t=1;
      }
   
    }
    if (t==1)
    {
      system("cls");
      printf("OPERATION DE CHANGEMENT DU MOT DE PASSE EST EN COURS D'EXECUTION ");
    printf(".");
   sleep(1);
   printf(".");
   sleep(1);
   printf(".");
   sleep(2);
   system("cls");
        printf("\n***!!! MOT DE PASSE change avec succes !!!~***");
       
    }
    else

    {  
    printf("Recherche d'utilisateur");
 system("cls");
printf(".");
  sleep(1);
  printf(".");
  sleep(1);
  printf(".");
  sleep(2);
        printf("\n!!Cet identifiant : %s n'existe pas!!!'",id);
    }}
}break;

case 3:{
system("cls");
printf("\n\n\n\n\n\n\n\n\n\n\n\n\n");
    printf("\n Affichage de la liste des utilisateurs  :");
   

for ( i = 1; i < N; i++)
{  
    printf("\n--> Numero: %d",i);
    printf("\n--> Identifiant : %s",Ut[i].IDutilisateur);
   
}

}break;

case 0:{
    a=1;
}
break;
system("cls");
case 4:{
 system("cls");
    if (O==0)
{ printf("Recherche d'utilisateur");
 printf(".");
  sleep(1);
  printf(".");
  sleep(1);
  printf(".");
  sleep(2);
    printf("\n!!Pas d'utilisateur!!");
}


else
{
    /* suppression d'un utilisateur */


    fflush(stdin);
    printf("\n_ Entrer l'identifiant que vous voulez supprimer :");
    gets(id);


 
for ( i = 0; i <= N; i++)
{
  C = indice(id,Ut,N);
  if (C >= 0)
  {
   
      for (j = C; j < N-1; j++)
     {
      Ut[j] = Ut[j+1];
     }
     N--;
    t=1;
       
    }
    else
    {
        t=0;
    }
     }

    if (t==1)  //ajout d'utilisateur avec succés !! //
    {   system("cls");
    printf("Lancement de processus de suppression");
 printf(".");
sleep(1);
printf(".");
sleep(1);
printf(".");
sleep(2);
system("cls");
        printf("\n\n **** l'utilisateur a ete supprime avec succes!!!**** \n");
    }
    else
    {  system("cls");  
printf(".");
sleep(1);
printf(".");
sleep(1);
printf(".");
sleep(2);
        printf("\n!!Cet utilisateur: %s n'existe pas'!!!\n",id);
    }
}
}break;

default:printf("\n\n\n\t--  RETIRE  --\n\n\n");
    break;
}
} while (choix!=0);
}
if(rep == 0)
{     system("cls");
    printf("\n\n\n\n\n\t^^^^^^^^^^^^^^^^^^^^^CONNEXION^^^^^^^^^^^^^^^^^^^^");
    fflush(stdin);
    printf("\n ---- Donner l'identifiant :      :");
    gets(IDutilisateur);
    fflush(stdin);
    printf("--- Le mot de passe :   :");
    gets(MDPutilisateur);
    C = login_utilisateur(N,Ut,IDutilisateur,MDPutilisateur);
if (C==1)
{  
    printf("\n \t~Connexion aboutie avec succes~: %s",IDutilisateur);
    printf(".");
sleep(1);
printf(".");
sleep(1);
printf(".");
sleep(2);
system("cls");
}
else
{
    printf("\n!!!!!!!Vous n'avez pas un compte sur la session!!!!!!!!");
}
if (C==1)
{  system("cls");
    do
    {
   printf("\n\t^^^^^^^^^^^^^^^^^^   MENU:   ^^^^^^^^^^^^^^^^^^");
   printf("\n _1 modifier votre mot de passe : \n _2 afficher les utilisateurs: \n _0 Se deconnecter :\n\t _Votre choix :");
   scanf("%d",&m);
   switch (m)
 {
     case 0: break;
     

case 1 :
 system("cls");
j=indice(IDutilisateur,Ut,N);

printf("--Entrer votre mot de passe :");
scanf("%s",&Ut[j].MDPutilisateur);
printf("***~Le mot de passe est change avec succes!!!~***");
break;

case 2 :
 system("cls");
printf("\n Liste des utilisateurs :");
liste(Ut , N );
break ;


}
} while (m!=0);
}
}

printf("\n\nTapez 1 si vous voulez changer de session et vous connecter a un autre compte existant, 0 pour quitter le programme: ");
scanf("%d",&r);
   
}

  system("cls");
printf("\n\n\t******************   DECONNEXION   ******************");
printf(".");
sleep(1);
printf(".");
sleep(1);
printf(".");
sleep(2);
 
    return 0;
}


